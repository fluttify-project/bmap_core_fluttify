// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_core_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKMapManager extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKMapManager> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::createBMKMapManager');
    final object = BMKMapManager()..refId = refId..tag = 'bmap_core_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKMapManager>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::create_batchBMKMapManager', {'length': length});
  
    final List<BMKMapManager> typedResult = resultBatch.map((result) => BMKMapManager()..refId = result..tag = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<BMKMapManager> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(BMKMapManager()..refId = result..tag = 'bmap_core_fluttify');
      return BMKMapManager()..refId = result..tag = 'bmap_core_fluttify';
    }
  }
  
  static Future<bool> setCoordinateTypeUsedInBaiduMapSDK(BMK_COORD_TYPE coorType) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager::setCoordinateTypeUsedInBaiduMapSDK([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::setCoordinateTypeUsedInBaiduMapSDK', {"coorType": coorType.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<BMK_COORD_TYPE> getCoordinateTypeUsedInBaiduMapSDK() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager::getCoordinateTypeUsedInBaiduMapSDK([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::getCoordinateTypeUsedInBaiduMapSDK', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return BMK_COORD_TYPE.values[result];
    }
  }
  
  static Future<void> logEnableModule(bool enable, BMKMapModule mapModule) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager::logEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::logEnableModule', {"enable": enable, "mapModule": mapModule.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> startGeneralDelegate(String key, BMKGeneralDelegate delegate) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager@$refId::start([\'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::startGeneralDelegate', {"key": key, "refId": refId});
  
  
    // handle native call
    MethodChannel('BMKMapManager::startGeneralDelegate::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::BMKGeneralDelegate::onGetNetworkState':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onGetNetworkState([\'iError\':$args[iError]])');
              }
        
              // handle the native call
              delegate?.onGetNetworkState(args['iError']);
              break;
            case 'Callback::BMKGeneralDelegate::onGetPermissionState':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onGetPermissionState([\'iError\':$args[iError]])');
              }
        
              // handle the native call
              delegate?.onGetPermissionState(args['iError']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getTotalSendFlaxLength() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager@$refId::getTotalSendFlaxLength([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::getTotalSendFlaxLength', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> getTotalRecvFlaxLength() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager@$refId::getTotalRecvFlaxLength([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::getTotalRecvFlaxLength', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> stop() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKMapManager@$refId::stop([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::stop', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension BMKMapManager_Batch on List<BMKMapManager> {
  //region getters
  
  //endregion

  //region methods
  Future<List<BMKMapManager>> sharedInstance_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::sharedInstance_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => BMKMapManager()..refId = result..tag = 'bmap_core_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<List<bool>> setCoordinateTypeUsedInBaiduMapSDK_batch(List<BMK_COORD_TYPE> coorType) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::setCoordinateTypeUsedInBaiduMapSDK_batch', [for (int i = 0; i < this.length; i++) {"coorType": coorType[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<BMK_COORD_TYPE>> getCoordinateTypeUsedInBaiduMapSDK_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::getCoordinateTypeUsedInBaiduMapSDK_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => BMK_COORD_TYPE.values[result]).toList();
    
      return typedResult;
    }
  }
  
  Future<void> logEnableModule_batch(List<bool> enable, List<BMKMapModule> mapModule) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::logEnableModule_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "mapModule": mapModule[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getTotalSendFlaxLength_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::getTotalSendFlaxLength_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getTotalRecvFlaxLength_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::getTotalRecvFlaxLength_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<bool>> stop_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapManager::stop_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}