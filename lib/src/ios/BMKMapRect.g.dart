// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_core_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKMapRect extends NSObject  {
  //region constants
  static const String name__ = 'BMKMapRect';

  
  //endregion

  //region creators
  static Future<BMKMapRect> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::createBMKMapRect');
    final object = BMKMapRect()..refId = refId..tag__ = 'bmap_core_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKMapRect>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::create_batchBMKMapRect', {'length': length});
  
    final List<BMKMapRect> typedResult = resultBatch.map((result) => BMKMapRect()..refId = result..tag__ = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<BMKMapPoint> get_origin() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKMapRect::get_origin", {'refId': refId});
    kNativeObjectPool.add(BMKMapPoint()..refId = __result__..tag__ = 'bmap_core_fluttify');
    return BMKMapPoint()..refId = __result__..tag__ = 'bmap_core_fluttify';
  }
  
  Future<BMKMapSize> get_size() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKMapRect::get_size", {'refId': refId});
    kNativeObjectPool.add(BMKMapSize()..refId = __result__..tag__ = 'bmap_core_fluttify');
    return BMKMapSize()..refId = __result__..tag__ = 'bmap_core_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_origin(BMKMapPoint origin) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapRect::set_origin', {'refId': refId, "origin": origin.refId});
  
  
  }
  
  Future<void> set_size(BMKMapSize size) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapRect::set_size', {'refId': refId, "size": size.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKMapRect_Batch on List<BMKMapRect> {
  //region getters
  Future<List<BMKMapPoint>> get_origin_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKMapRect::get_origin_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKMapPoint()..refId = __result__..tag__ = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<BMKMapSize>> get_size_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKMapRect::get_size_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKMapSize()..refId = __result__..tag__ = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_origin_batch(List<BMKMapPoint> origin) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapRect::set_origin_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "origin": origin[__i__].refId}]);
  
  
  }
  
  Future<void> set_size_batch(List<BMKMapSize> size) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKMapRect::set_size_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "size": size[__i__].refId}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}