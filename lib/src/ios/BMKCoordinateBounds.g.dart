// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_core_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKCoordinateBounds extends NSObject  {
  //region constants
  static const String name__ = 'BMKCoordinateBounds';

  
  //endregion

  //region creators
  static Future<BMKCoordinateBounds> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::createBMKCoordinateBounds');
    final object = BMKCoordinateBounds()..refId = refId..tag__ = 'bmap_core_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKCoordinateBounds>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::create_batchBMKCoordinateBounds', {'length': length});
  
    final List<BMKCoordinateBounds> typedResult = resultBatch.map((result) => BMKCoordinateBounds()..refId = result..tag__ = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_northEast() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateBounds::get_northEast", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_core_fluttify');
    return CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_core_fluttify';
  }
  
  Future<CLLocationCoordinate2D> get_southWest() async {
    final __result__ = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateBounds::get_southWest", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_core_fluttify');
    return CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_core_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_northEast(CLLocationCoordinate2D northEast) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKCoordinateBounds::set_northEast', {'refId': refId, "northEast": northEast.refId});
  
  
  }
  
  Future<void> set_southWest(CLLocationCoordinate2D southWest) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKCoordinateBounds::set_southWest', {'refId': refId, "southWest": southWest.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKCoordinateBounds_Batch on List<BMKCoordinateBounds> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_northEast_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateBounds::get_northEast_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<CLLocationCoordinate2D>> get_southWest_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateBounds::get_southWest_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => CLLocationCoordinate2D()..refId = __result__..tag__ = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_northEast_batch(List<CLLocationCoordinate2D> northEast) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKCoordinateBounds::set_northEast_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "northEast": northEast[__i__].refId}]);
  
  
  }
  
  Future<void> set_southWest_batch(List<CLLocationCoordinate2D> southWest) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKCoordinateBounds::set_southWest_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "southWest": southWest[__i__].refId}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}