// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_core_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKCoordinateRegion extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKCoordinateRegion> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::createBMKCoordinateRegion');
    final object = BMKCoordinateRegion()..refId = refId..tag = 'bmap_core_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKCoordinateRegion>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::create_batchBMKCoordinateRegion', {'length': length});
  
    final List<BMKCoordinateRegion> typedResult = resultBatch.map((result) => BMKCoordinateRegion()..refId = result..tag = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_center() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateRegion::get_center", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = result..tag = 'bmap_core_fluttify');
    return CLLocationCoordinate2D()..refId = result..tag = 'bmap_core_fluttify';
  }
  
  Future<BMKCoordinateSpan> get_span() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateRegion::get_span", {'refId': refId});
    kNativeObjectPool.add(BMKCoordinateSpan()..refId = result..tag = 'bmap_core_fluttify');
    return BMKCoordinateSpan()..refId = result..tag = 'bmap_core_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_center(CLLocationCoordinate2D center) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKCoordinateRegion::set_center', {'refId': refId, "center": center.refId});
  
  
  }
  
  Future<void> set_span(BMKCoordinateSpan span) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKCoordinateRegion::set_span', {'refId': refId, "span": span.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKCoordinateRegion_Batch on List<BMKCoordinateRegion> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_center_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateRegion::get_center_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CLLocationCoordinate2D()..refId = result..tag = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<BMKCoordinateSpan>> get_span_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKCoordinateRegion::get_span_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKCoordinateSpan()..refId = result..tag = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}