// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_core_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKAddressComponent extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKAddressComponent> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::createBMKAddressComponent');
    final object = BMKAddressComponent()..refId = refId..tag = 'bmap_core_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKAddressComponent>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('ObjectFactory::create_batchBMKAddressComponent', {'length': length});
  
    final List<BMKAddressComponent> typedResult = resultBatch.map((result) => BMKAddressComponent()..refId = result..tag = 'bmap_core_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_country() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_country", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_province() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_province", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_city() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_city", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_district() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_district", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_town() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_town", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_streetName() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_streetName", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_streetNumber() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_streetNumber", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_adCode() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_adCode", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_countryCode() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_countryCode", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_direction() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_direction", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_distance() async {
    final result = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_distance", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_country(String country) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_country', {'refId': refId, "country": country});
  
  
  }
  
  Future<void> set_province(String province) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_province', {'refId': refId, "province": province});
  
  
  }
  
  Future<void> set_city(String city) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_city', {'refId': refId, "city": city});
  
  
  }
  
  Future<void> set_district(String district) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_district', {'refId': refId, "district": district});
  
  
  }
  
  Future<void> set_town(String town) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_town', {'refId': refId, "town": town});
  
  
  }
  
  Future<void> set_streetName(String streetName) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_streetName', {'refId': refId, "streetName": streetName});
  
  
  }
  
  Future<void> set_streetNumber(String streetNumber) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_streetNumber', {'refId': refId, "streetNumber": streetNumber});
  
  
  }
  
  Future<void> set_adCode(String adCode) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_adCode', {'refId': refId, "adCode": adCode});
  
  
  }
  
  Future<void> set_countryCode(String countryCode) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_countryCode', {'refId': refId, "countryCode": countryCode});
  
  
  }
  
  Future<void> set_direction(String direction) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_direction', {'refId': refId, "direction": direction});
  
  
  }
  
  Future<void> set_distance(String distance) async {
    await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod('BMKAddressComponent::set_distance', {'refId': refId, "distance": distance});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKAddressComponent_Batch on List<BMKAddressComponent> {
  //region getters
  Future<List<String>> get_country_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_country_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_province_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_province_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_city_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_city_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_district_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_district_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_town_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_town_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_streetName_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_streetName_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_streetNumber_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_streetNumber_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_adCode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_adCode_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_countryCode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_countryCode_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_direction_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_direction_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_distance_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_core_fluttify').invokeMethod("BMKAddressComponent::get_distance_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}